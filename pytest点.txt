*pytest 插件
pytest -html  （生成html格式的自动化测试报告）
pytest - xdist （测试用例分布式执行 多cpu 分发）
pytest -ordering  （用于改变测试用例的执行顺序）
pytest- rerunfailures  （用例跑失败后重跑）
allure -pytest （用于生成美观的测试报告）
全部安装：Terminal里输入命令   pip install -r +包含所有插件的文件名
*使用pytest ，默认的测试用例的规则以及基础应用 
1.模块名必须以test_开头或者_test结尾
2.测试类方法必须以Test 开头 ，并且不能有init方法
3.测试方法必须以test 开头
*pytest 测试用例的运行方式
1.主函数模式
（1）运行所有：pytest.main()
（2）指定模块：pytest.main(["-vs","test_login.py"])
（3）指定目录：pytest.main(["-vs","/interface_testcase"])
（4）通过nodeid指定用例运行：nodeid由模块名，分隔符，类名，方法名，函数名组成： 
    pytest.main(['-vs','./interface_testcase/test_interface.py::test_04_func'])
    pytest.main(['-vs','./interface_testcase/test_interface.py::Testinterface::test_04_func'])
2.命令行模式
（1）运行所有：pytest
（2）指定模块：pytest  -vs test_login.py
（3）指定目录：pytest  -vs/interface_testcase
（4）指定目录:  pytest    -vs/interface_testcase/test_interface.py::test_04_func
 参数详解：
 -s 表示输出调试信息 ，包括print打印得信息
 -v:显示更详细得信息
 -vs：两个参数一起用
 -n：支持多线程或者分布式运行测试用例
    如：pytest -vs ./test_case/test_login.py -n2
 --reruns NUM:失败用例重跑     '-vs','./test_case','--reruns=2'
 -x : 表示只要一个用例报错  那么就停止测试
 --maxfail=2 出现两个用例失败就停止
 -k：根据测试用例得部分得字符串指定测试用例
如：pytest -vs ./test_case -k "a"
--html ./ report/report.html
*pytest 执行测试用例得顺序是怎么样的呢
 unittest ：ascll 的大小来决定执行的顺序
 *pytest 默认从上到下
改变默认的执行顺序：使用mark标记  @pytest.mark.run(order=1)
3.通过读取pytest.ini配置文件运行
pytest.ini 这个文件它是pytest单元测试框架得核心配置文件
1：位置  ：放在项目的根目录
2：编码：必须是ANSI，可以使用notpad++修改编码格式
3：作用：pytest默认的行为
4：运行规则：不管是主函数还是命令行模式运行，都会读取这个配置文件
[pytest]
addopts = -vs    #命令行的参数，用空格分隔
   #测试用例文件夹，’可自己配置，../pytestproject 为上一层的pytestproject文件
testpaths = ../pytestproject    #测试用例的路径
#配置测试搜索的测试文件名称
python_files = test_*.py         #模块名的规则
#配置测试搜索的测试类名
python_classes = Test*           #类名的规则
#配置测试搜索的测试函数名
python_functions =test         #方法名的规则

**如何分组执行（冒烟，分模块执行，接口和web执行）
smoke：冒烟用例，分布在各个模块里面
pytest -vs -m “smoke”
pytest-vs -m “ smoke or  usermanage”

** pytest跳过测试用例 
（1） 无条件跳过
 @pytest.mark.skip(reason='new year')
（2）有条件跳过
@pytest.mark.skipif(age < 18, reason='未成年')
** pytest 结合allure-pytest插件生成allure测试报告
1.下载，解压，配置 path路径
------------------------------
一、@pytest.mark.parametrize()基本用法
@pytest.mark.parametrize(args_name,args_value）
args_name :参数名
args_value：参数值（列表，元组，字典列表）有多少个值就会执行多少次用例
第一种方式：
import pytest

class TestApi:

    @pytest.mark.parametrize('aa',['法国','hhh','kkk'])
    def test_01_one(self,aa):
        print(aa)

if __name__ == '__main__':
    pytest.main()

第二种方式：跟unittest的ddt里面的@unpack解包一样
import pytest

class TestApi:

    @pytest.mark.parametrize('name,age',[['狗','很狗'],['晨','18']])
    def test_01_one(self,name,age):
        print(name,age)

if __name__ == '__main__':
    pytest.main()

二：YAML文件详解---实现接口自动化
1.用于全局的配置文件  ini  ，yaml
2.用于写测试用例（接口测试用例）

yaml介绍: 是一种数据格式，支持注释，换行，多行字符串，裸字符串（整形，字符串）
语法规则：
1.区分大小写
2.使用缩进表示层级，不能使用tab键缩进，只能用空格（和python一样）
3.缩进没有数量的，只要前面是对齐的就行
3.注释是#










